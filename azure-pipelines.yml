# Azure Pipelines: build the WebGL engine and wwtsdk.js files as build artifacts.

trigger:
  branches:
    include:
      - master
      - beta

parameters:
- name: 'zolaVersion'
  default: '0.10.1'
  type: string

jobs:
- job: BuildSDK
  pool:
    vmImage: windows-latest

  steps:

  - checkout: self
    submodules: recursive

  # ScriptSharp build

  - task: MSBuild@1
    displayName: Build WebGL Engine with ScriptSharp
    inputs:
      solution: 'engine/WebGlEngine.sln'
      msbuildVersion: '16.0'
      msbuildArchitecture: 'x64'
      clean: true

  - task: CopyFiles@2
    displayName: Stage ScriptSharp artifacts
    inputs:
      sourceFolder: '.'
      contents: |
        engine/wwtlib/bin/wwtlib.js
      targetFolder: $(Build.ArtifactStagingDirectory)
      cleanTargetFolder: true

  - task: PublishPipelineArtifact@0
    displayName: Publish ScriptSharp artifacts
    inputs:
      artifactName: scriptsharp
      targetPath: $(Build.ArtifactStagingDirectory)/engine/wwtlib

  # JavaScript/TypeScript build and test

  - task: NodeTool@0
    displayName: Set up node.js
    inputs:
      versionSpec: '>=12'

  - script: npm cache verify
    displayName: npm cache verify

  - script: npx lerna bootstrap --concurrency=1
    displayName: Lerna NPM setup

  - script: npm run build
    displayName: NPM build

  - script: |
      mkdir $(Build.ArtifactStagingDirectory)\engine-hosted
      cp engine\src\index.js $(Build.ArtifactStagingDirectory)\engine-hosted\wwtsdk.js
      cp engine\src\index.min.js $(Build.ArtifactStagingDirectory)\engine-hosted\wwtsdk.min.js
      cp engine\src\index.d.ts $(Build.ArtifactStagingDirectory)\engine-hosted\wwtsdk.d.ts
    displayName: Stage JavaScript hosted artifacts

  - task: PublishPipelineArtifact@0
    displayName: Publish JavaScript hosted artifacts
    inputs:
      artifactName: engine-hosted
      targetPath: $(Build.ArtifactStagingDirectory)/engine-hosted

  - script: npm run lint
    displayName: NPM lint

  - script: npm run test
    displayName: NPM test

  - task: PublishTestResults@2
    displayName: Publish test results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'engine/tests/results.xml'

  # Docs

  - script: npm run doc
    displayName: NPM doc

  - powershell: |
      $u = 'https://github.com/getzola/zola/releases/download/v${{ parameters.zolaVersion }}/zola-v${{ parameters.zolaVersion }}-x86_64-pc-windows-msvc.zip'
      Invoke-WebRequest -Uri $u -OutFile zola.zip

      Add-Type -assembly "System.IO.Compression.Filesystem";
      [IO.Compression.Zipfile]::ExtractToDirectory("zola.zip", ".");
    displayName: Install Zola

  # The check is failing spuriously on Azure Pipelines too often right now (2020 Apr).
  # - powershell: |
  #     cd docs
  #     ..\zola.exe check
  #   displayName: Check Zola docs site

  - powershell: |
      cd docs
      ..\zola.exe build
    displayName: Zola docs build

  - task: CopyFiles@2
    displayName: Stage docs artifacts
    inputs:
      sourceFolder: '.'
      contents: |
        docs/public/**
      targetFolder: $(Build.ArtifactStagingDirectory)
      cleanTargetFolder: false

  - task: PublishPipelineArtifact@0
    displayName: Publish docs artifacts
    inputs:
      artifactName: docs
      targetPath: $(Build.ArtifactStagingDirectory)/docs/public

  # semantic-release ahoy

  - script: npm run semantic-release-win
    displayName: semantic-release processing
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)

  # Publish the hosted JavaScript artifacts

  ## - task: AzureFileCopy@3
  ##   displayName: Upload artifacts to Azure Storage
  ##   inputs:
  ##     SourcePath: '$(build.artifactStagingDirectory)/engine-hosted'
  ##     azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##     Destination: 'AzureBlob'
  ##     storage: 'wwtwebstatic'
  ##     ContainerName: '$web'
  ##     blobPrefix: engine/$(version_text)

  ## - task: AzureFileCopy@3
  ##   displayName: Upload artifacts to second Azure Storage location (maybe)
  ##   condition: and(succeeded(), ne(variables['version_text_2'], 'skip'))
  ##   inputs:
  ##     SourcePath: '$(build.artifactStagingDirectory)/dist'
  ##     azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##     Destination: 'AzureBlob'
  ##     storage: 'wwtwebstatic'
  ##     ContainerName: '$web'
  ##     blobPrefix: engine/$(version_text_2)

  # Publish the documentation

  ## - task: AzureFileCopy@3
  ##   displayName: Upload docs to Azure Storage
  ##   inputs:
  ##     SourcePath: '$(build.artifactStagingDirectory)/docs/public'
  ##     azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##     Destination: 'AzureBlob'
  ##     storage: 'wwtwebstatic'
  ##     ContainerName: '$web'
  ##     blobPrefix: '_docs/webgl-reference/$(version_text)'

  # Purge CDNs (last since this is slow and nearly optional)

  ## - task: AzurePowerShell@4
  ##   displayName: Purge hosted JS CDN
  ##   inputs:
  ##     azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##     azurePowerShellVersion: 'LatestVersion'
  ##     scriptType: 'inlineScript'
  ##     inline: |
  ##       Unpublish-AzCdnEndpointContent `
  ##         -ProfileName wwt-cdn-01 `
  ##         -ResourceGroupName wwt-web01 `
  ##         -EndpointName wwtweb-prod `
  ##         -PurgeContent '/engine/$(version_text)/*'

  ## - task: AzurePowerShell@4
  ##   displayName: Purge docs CDN
  ##   inputs:
  ##     azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##     azurePowerShellVersion: 'LatestVersion'
  ##     scriptType: 'inlineScript'
  ##     inline: |
  ##       Unpublish-AzCdnEndpointContent `
  ##         -ProfileName wwt-cdn-01 `
  ##         -ResourceGroupName wwt-web01 `
  ##         -EndpointName wwtwebdocs-prod `
  ##         -PurgeContent '/webgl-reference/$(version_text)/*'
