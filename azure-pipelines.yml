# Azure Pipelines: build the WebGL engine and wwtsdk.js files as build artifacts.

trigger:
  branches:
    include:
      - master
      - "refs/tags/v*"

parameters:
- name: 'zolaVersion'
  default: '0.10.1'
  type: string

jobs:
- job: BuildSDK
  pool:
    vmImage: windows-latest

  steps:

  - checkout: self
    submodules: recursive

  - powershell: |
      $branch = "$(Build.SourceBranch)"
      if($branch.StartsWith("refs/tags/v")) {
        $version = $branch.Substring(11)
        $majmin = ($version -Split '\.')[0..1] -Join '.'
        # We publish under both the full version string and a `major.minor`
        # version for people who want to get bugfixes (deployed as micro
        # version updates) automatically. To ease the CDN purge logic below,
        # "version_text" is the $majmin version.
        Write-Host "##vso[task.setvariable variable=is_release;]true"
        Write-Host "##vso[task.setvariable variable=version_text;]$majmin"
        Write-Host "##vso[task.setvariable variable=version_text_2;]$version"
      } else {
        # Won't actually get published on PRs, etc.
        Write-Host "##vso[task.setvariable variable=is_release;]false"
        Write-Host "##vso[task.setvariable variable=version_text;]latest"
        Write-Host "##vso[task.setvariable variable=version_text_2;]skip"
      }
    displayName: Set deployment parameters

  # ScriptSharp build

  - task: MSBuild@1
    displayName: Build WebGL Engine with ScriptSharp
    inputs:
      solution: 'WebGlEngine.sln'
      msbuildVersion: '16.0'
      msbuildArchitecture: 'x64'
      clean: true

  - task: CopyFiles@2
    displayName: Stage ScriptSharp artifacts
    inputs:
      sourceFolder: '.'
      contents: |
        wwtlib/bin/wwtlib.js
      targetFolder: $(Build.ArtifactStagingDirectory)
      cleanTargetFolder: true

  - task: PublishPipelineArtifact@0
    displayName: Publish ScriptSharp artifacts
    inputs:
      artifactName: scriptsharp
      targetPath: $(Build.ArtifactStagingDirectory)/wwtlib

  # JaveScript/TypeScript build and test

  - task: NodeTool@0
    displayName: Set up node.js
    inputs:
      versionSpec: '>=12'

  - script: npm install
    displayName: Install NPM dependencies

  - script: npm run concat-index && npm run tscheck && npm run uglify
    displayName: Build and check JavaScript files

  - script: |
      mkdir $(Build.ArtifactStagingDirectory)\dist
      cp src\index.js $(Build.ArtifactStagingDirectory)\dist\wwtsdk.js
      cp src\index.min.js $(Build.ArtifactStagingDirectory)\dist\wwtsdk.min.js
      cp src\index.d.ts $(Build.ArtifactStagingDirectory)\dist\wwtsdk.d.ts
    displayName: Stage JavaScript hosted artifacts

  - task: PublishPipelineArtifact@0
    displayName: Publish JavaScript hosted artifacts
    inputs:
      artifactName: hosted
      targetPath: $(Build.ArtifactStagingDirectory)/dist

  - script: npx mocha-headless-chrome -f tests/tests.html -r xunit >test_results.xml
    displayName: Run tests against JS SDK

  # NOTE: The file produced above is actually in JUnit format, not xUnit!
  - task: PublishTestResults@2
    displayName: Publish test results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results.xml'

  # Docs

  - powershell: |
      $u = 'https://github.com/getzola/zola/releases/download/v${{ parameters.zolaVersion }}/zola-v${{ parameters.zolaVersion }}-x86_64-pc-windows-msvc.zip'
      Invoke-WebRequest -Uri $u -OutFile zola.zip

      Add-Type -assembly "System.IO.Compression.Filesystem";
      [IO.Compression.Zipfile]::ExtractToDirectory("zola.zip", ".");
    displayName: Install Zola

  # The check is failing spuriously on Azure Pipelines too often right now (2020 Apr).
  # - powershell: |
  #     cd docs
  #     ..\zola.exe check
  #   displayName: Check Zola docs site

  - powershell: |
      cd docs
      ..\zola.exe build
      rm public\apiref\index.html
    displayName: Zola docs build

  - script: npm run doc
    displayName: TypeDoc docs build

  - task: CopyFiles@2
    displayName: Stage docs artifacts
    inputs:
      sourceFolder: '.'
      contents: |
        docs/public/**
      targetFolder: $(Build.ArtifactStagingDirectory)
      cleanTargetFolder: false

  - task: PublishPipelineArtifact@0
    displayName: Publish docs artifacts
    inputs:
      artifactName: docs
      targetPath: $(Build.ArtifactStagingDirectory)/docs/public

  # Publish the hosted JavaScript artifacts

  - task: AzureFileCopy@3
    displayName: Upload artifacts to Azure Storage
    inputs:
      SourcePath: '$(build.artifactStagingDirectory)/dist'
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      Destination: 'AzureBlob'
      storage: 'wwtwebstatic'
      ContainerName: '$web'
      blobPrefix: engine/$(version_text)

  - task: AzureFileCopy@3
    displayName: Upload artifacts to second Azure Storage location (maybe)
    condition: and(succeeded(), ne(variables['version_text_2'], 'skip'))
    inputs:
      SourcePath: '$(build.artifactStagingDirectory)/dist'
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      Destination: 'AzureBlob'
      storage: 'wwtwebstatic'
      ContainerName: '$web'
      blobPrefix: engine/$(version_text_2)

  # Publish the documentation

  - task: AzureFileCopy@3
    displayName: Upload docs to Azure Storage
    inputs:
      SourcePath: '$(build.artifactStagingDirectory)/docs/public'
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      Destination: 'AzureBlob'
      storage: 'wwtwebstatic'
      ContainerName: '$web'
      blobPrefix: '_docs/webgl-reference/$(version_text)'

  # Maybe publish to NPM

  - task: Npm@1
    condition: and(succeeded(), eq(variables['is_release'], 'true'))
    inputs:
      command: publish
      publishEndpoint: 'aas_wwt@npmjs.com'

  # Purge CDNs (last since this is slow and nearly optional)

  - task: AzurePowerShell@4
    displayName: Purge hosted JS CDN
    inputs:
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      azurePowerShellVersion: 'LatestVersion'
      scriptType: 'inlineScript'
      inline: |
        Unpublish-AzCdnEndpointContent `
          -ProfileName wwt-cdn-01 `
          -ResourceGroupName wwt-web01 `
          -EndpointName wwtweb-prod `
          -PurgeContent '/engine/$(version_text)/*'

  - task: AzurePowerShell@4
    displayName: Purge docs CDN
    inputs:
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      azurePowerShellVersion: 'LatestVersion'
      scriptType: 'inlineScript'
      inline: |
        Unpublish-AzCdnEndpointContent `
          -ProfileName wwt-cdn-01 `
          -ResourceGroupName wwt-web01 `
          -EndpointName wwtwebdocs-prod `
          -PurgeContent '/webgl-reference/$(version_text)/*'
