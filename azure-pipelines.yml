# Copyright 2020 the .NET Foundation
# Licensed under the MIT License

trigger:
  branches:
    include:
      - master

parameters:
- name: 'zolaVersion'
  default: '0.10.1'
  type: string

jobs:
- job: Main
  pool:
    vmImage: windows-latest

  steps:

  # Setup

  - checkout: self
    submodules: recursive

  - task: NodeTool@0
    displayName: Set up node.js
    inputs:
      versionSpec: '>=12'

  - script: npm cache verify
    displayName: npm cache verify

  # On `master`, we immediately simulate the merge with `beta` that will assign
  # version numbers. See
  # https://github.com/microsoft/azure-pipelines-image-generation/issues/740
  # about the GIT_REDIRECT_STDERR line.

  - powershell: |
      $env:GIT_REDIRECT_STDERR = '2>&1'
      echo TEMPINFO
      git branch -a
      echo NEXT_GIT_TAG
      git tag temp-checkout-head HEAD
      echo NEXT_GIT_SWITCH
      git switch beta
      echo NEXT_GIT_MERGE
      git merge --no-commit --no-ff -m "Merge update to beta" temp-checkout-head
      echo NEXT_NPX_LERNA
      npx lerna version --no-push --conventional-commits --conventional-prerelease
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: Merge into beta branch

  # ScriptSharp build

  - task: MSBuild@1
    displayName: Build WebGL Engine with ScriptSharp
    inputs:
      solution: 'engine/WebGlEngine.sln'
      msbuildVersion: '16.0'
      msbuildArchitecture: 'x64'
      clean: true

  - task: CopyFiles@2
    displayName: Stage ScriptSharp artifacts
    inputs:
      sourceFolder: '.'
      contents: |
        engine/wwtlib/bin/wwtlib.js
      targetFolder: $(Build.ArtifactStagingDirectory)
      cleanTargetFolder: true

  - task: PublishPipelineArtifact@0
    displayName: Publish ScriptSharp artifacts
    inputs:
      artifactName: scriptsharp
      targetPath: $(Build.ArtifactStagingDirectory)/engine/wwtlib

  # JavaScript/TypeScript build process can begin in earnest

  - script: npx lerna bootstrap --concurrency=1
    displayName: Lerna NPM setup

  - script: npm run build
    displayName: NPM build

  - script: |
      mkdir $(Build.ArtifactStagingDirectory)\engine-hosted
      cp engine\src\index.js $(Build.ArtifactStagingDirectory)\engine-hosted\wwtsdk.js
      cp engine\src\index.min.js $(Build.ArtifactStagingDirectory)\engine-hosted\wwtsdk.min.js
      cp engine\src\index.d.ts $(Build.ArtifactStagingDirectory)\engine-hosted\wwtsdk.d.ts
    displayName: Stage JavaScript hosted artifacts

  - task: PublishPipelineArtifact@0
    displayName: Publish JavaScript hosted artifacts
    inputs:
      artifactName: engine-hosted
      targetPath: $(Build.ArtifactStagingDirectory)/engine-hosted

  - script: npm run lint
    displayName: NPM lint

  - script: npm run test
    displayName: NPM test

  - task: PublishTestResults@2
    displayName: Publish test results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'engine/tests/results.xml'

  # Docs

  - script: npm run doc
    displayName: NPM doc

  - powershell: |
      $u = 'https://github.com/getzola/zola/releases/download/v${{ parameters.zolaVersion }}/zola-v${{ parameters.zolaVersion }}-x86_64-pc-windows-msvc.zip'
      Invoke-WebRequest -Uri $u -OutFile zola.zip

      Add-Type -assembly "System.IO.Compression.Filesystem";
      [IO.Compression.Zipfile]::ExtractToDirectory("zola.zip", ".");
    displayName: Install Zola

  # The check is failing spuriously on Azure Pipelines too often right now (2020 Apr).
  # - powershell: |
  #     cd docs
  #     ..\zola.exe check
  #   displayName: Check Zola docs site

  - powershell: |
      cd docs
      ..\zola.exe build -o $(Build.ArtifactStagingDirectory)/docs
    displayName: Zola docs build

  - task: PublishPipelineArtifact@0
    displayName: Publish docs artifacts
    inputs:
      artifactName: docs
      targetPath: $(Build.ArtifactStagingDirectory)/docs

  # Release processes

  ### - task: AzureFileCopy@3
  ###   condition: and(succeeded(), contains(variables['newVersion_pkgw_engine'], '.'))
  ###   displayName: Release hosted engine artifacts
  ###   inputs:
  ###     SourcePath: '$(build.artifactStagingDirectory)/engine-hosted'
  ###     azureSubscription: 'aas@wwtadmindotnetfoundation'
  ###     Destination: 'AzureBlob'
  ###     storage: 'wwtwebstatic'
  ###     ContainerName: '$web'
  ###     blobPrefix: engine/$(engineVersionText)

  # We always release new documentation, with a version tracking the engine
  # package.

  ### - powershell: |
  ###     $branch = "$(Build.SourceBranch)"
  ###     if ($branch -eq "beta") {
  ###       Write-Host "##vso[task.setvariable variable=docsVersionText;]latest"
  ###     } elseif ($branch -eq "master") {
  ###       $version = "$(node -pe "require('./engine/package.json').version")"
  ###       $majmin = ($version -Split '\.')[0..1] -Join '.'
  ###       Write-Host "##vso[task.setvariable variable=docsVersionText;]$(majmin)"
  ###     }
  ###   displayName: Set docs release version text

  ### - task: AzureFileCopy@3
  ###   displayName: Release updated documentation
  ###   inputs:
  ###     SourcePath: '$(build.artifactStagingDirectory)/docs'
  ###     azureSubscription: 'aas@wwtadmindotnetfoundation'
  ###     Destination: 'AzureBlob'
  ###     storage: 'wwtwebstatic'
  ###     ContainerName: '$web'
  ###     blobPrefix: '_docs/webgl-reference/$(docsVersionText)'

  # CDN purges - last since they are slow and close to optional

  ### - task: AzurePowerShell@4
  ###   condition: and(succeeded(), contains(variables['newVersion_pkgw_engine'], '.'))
  ###   displayName: CDN purge - hosted engine artifacts
  ###   inputs:
  ###     azureSubscription: 'aas@wwtadmindotnetfoundation'
  ###     azurePowerShellVersion: 'LatestVersion'
  ###     scriptType: 'inlineScript'
  ###     inline: |
  ###       Unpublish-AzCdnEndpointContent `
  ###         -ProfileName wwt-cdn-01 `
  ###         -ResourceGroupName wwt-web01 `
  ###         -EndpointName wwtweb-prod `
  ###         -PurgeContent '/engine/$(engineVersionText)/*'

  ### - task: AzurePowerShell@4
  ###   displayName: CDN purge - docs
  ###   inputs:
  ###     azureSubscription: 'aas@wwtadmindotnetfoundation'
  ###     azurePowerShellVersion: 'LatestVersion'
  ###     scriptType: 'inlineScript'
  ###     inline: |
  ###       Unpublish-AzCdnEndpointContent `
  ###         -ProfileName wwt-cdn-01 `
  ###         -ResourceGroupName wwt-web01 `
  ###         -EndpointName wwtwebdocs-prod `
  ###         -PurgeContent '/webgl-reference/$(docsVersionText)/*'
