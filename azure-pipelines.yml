# Azure Pipelines: build the WebGL engine and wwtsdk.js files as build artifacts.

trigger:
  branches:
    include:
      - 7series

jobs:
- job: BuildSDK
  pool:
    vmImage: windows-latest

  steps:

  # - powershell: |
  #     $branch = "$(Build.SourceBranch)"
  #     if($branch.StartsWith("refs/tags/v")) {
  #       $version = $branch.Substring(11)
  #       $majmin = ($version -Split '\.')[0..1] -Join '.'
  #       # We publish under both the full version string and a `major.minor`
  #       # version for people who want to get bugfixes (deployed as micro
  #       # version updates) automatically. To ease the CDN purge logic below,
  #       # "pub_prefix" is the $majmin version.
  #       Write-Host "##vso[task.setvariable variable=pub_prefix;]engine/$majmin"
  #       Write-Host "##vso[task.setvariable variable=pub_prefix_2;]engine/$version"
  #     } else {
  #       # Won't actually get published on PRs, etc.
  #       Write-Host "##vso[task.setvariable variable=pub_prefix;]engine/latest"
  #       Write-Host "##vso[task.setvariable variable=pub_prefix_2;]skip"
  #     }
  #   displayName: Set deployment parameters

  - task: MSBuild@1
    displayName: Build WebGL Engine with ScriptSharp
    inputs:
      solution: 'WebGlEngine.sln'
      msbuildVersion: '16.0'
      msbuildArchitecture: 'x64'
      clean: true

  - task: NodeTool@0
    displayName: Set up node.js
    inputs:
      versionSpec: '>=12'

  - script: npm install
    displayName: Install NPM dependencies

  - script: npm run concat-index && npm run build && npm run doc
    displayName: Build final JavaScript files

  - task: CopyFiles@2
    displayName: Stage WebGL engine artifacts
    inputs:
      sourceFolder: '.'
      contents: |
        wwtlib/bin/wwtlib.js
        src/index.js
        docs/
      targetFolder: $(Build.ArtifactStagingDirectory)
      cleanTargetFolder: true

  - task: PublishPipelineArtifact@0
    displayName: Publishing SDK artifact
    inputs:
      artifactName: wwt-webgl-engine
      targetPath: $(Build.ArtifactStagingDirectory)

  # - script: npm install mocha chai mocha-headless-chrome --save-dev
  #   displayName: Installing mocha testing framework

  # - script: node_modules/.bin/mocha-headless-chrome -f tests/tests.html -r xunit >test_results.xml
  #   displayName: Running tests against JS SDK

  # NOTE: The file produced above is actually in JUnit format, not xUnit!
  # - task: PublishTestResults@2
  #   displayName: Publish test results
  #   condition: succeededOrFailed()
  #   inputs:
  #     testResultsFormat: 'JUnit'
  #     testResultsFiles: 'test_results.xml'

  # - task: AzureFileCopy@3
  #   displayName: Upload artifacts to Azure Storage
  #   inputs:
  #     SourcePath: '$(build.artifactStagingDirectory)'
  #     azureSubscription: 'aas@wwtadmindotnetfoundation'
  #     Destination: 'AzureBlob'
  #     storage: 'wwtwebstatic'
  #     ContainerName: '$web'
  #     blobPrefix: $(pub_prefix)
 
  # - task: AzureFileCopy@3
  #   displayName: Upload artifacts to second Azure Storage location (maybe)
  #   condition: and(succeeded(), ne(variables['pub_prefix_2'], 'skip'))
  #   inputs:
  #     SourcePath: '$(build.artifactStagingDirectory)'
  #     azureSubscription: 'aas@wwtadmindotnetfoundation'
  #     Destination: 'AzureBlob'
  #     storage: 'wwtwebstatic'
  #     ContainerName: '$web'
  #     blobPrefix: $(pub_prefix_2)

  # - task: AzurePowerShell@4
  #   displayName: Purge CDN
  #   inputs:
  #     azureSubscription: 'aas@wwtadmindotnetfoundation'
  #     azurePowerShellVersion: 'LatestVersion'
  #     scriptType: 'inlineScript'
  #     inline: |
  #       Unpublish-AzCdnEndpointContent `
  #         -ProfileName wwt-cdn-01 `
  #         -ResourceGroupName wwt-web01 `
  #         -EndpointName wwtweb-prod `
  #         -PurgeContent '/$(pub_prefix)/*'
