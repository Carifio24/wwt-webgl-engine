# Copyright 2020 the .NET Foundation
# Licensed under the MIT License

parameters:
- name: isMainDev
  type: boolean
  default: false
- name: isRelease
  type: boolean
  default: false

jobs:

# Deployment jobs that might happen on updates to either `master` *or* `rc`.
# On updates to master, we deploy everything under the "latest" name. On
# updates to `rc`, we deploy some subset of the projects that can only be
# determined at runtime.

- job: deploy_engine_hosted
  pool:
    vmImage: windows-latest
  variables:
  - group: Deployment Credentials
  steps:
  - template: azure-job-setup.yml

  - bash: |
      set -euo pipefail

      if [[ ${isMainDev} == True ]] ; then
        tag=latest
      elif cranko show if-released --exit-code @wwtelescope/engine ; then
        # Engine tag is major version only:
        tag="$(cranko show version @wwtelescope/engine |cut -d. -f1)"
      else
        tag=skip
      fi

      echo "engine deployment mode: $isMainDev, $isRelease => $tag"
      echo "##vso[task.setvariable variable=ENGINE_DEPLOYMENT_TAG;]$tag"
    displayName: Determine deployment tag
    env:
      isMainDev: ${{ parameters.isMainDev }}
      isRelease: ${{ parameters.isRelease }}

  - task: AzureFileCopy@3
    condition: and(succeeded(), ne(variables['ENGINE_DEPLOYMENT_TAG'], 'skip'))
    displayName: Deploy hosted engine artifacts
    inputs:
      SourcePath: '$(Build.ArtifactStagingDirectory)/engine-hosted'
      azureSubscription: 'aas@wwtadmindotnetfoundation'
      Destination: 'AzureBlob'
      storage: 'wwtwebstatic'
      ContainerName: '$web'
      blobPrefix: engine/$(ENGINE_DEPLOYMENT_TAG)

# Deployment jobs that should only happen on updates to `rc`, i.e.
# primary releases.

- ${{ if parameters.isRelease }}:
  - job: branch_and_tag
    pool:
      vmImage: ubuntu-20.04
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-job-setup.yml
      parameters:
        setupGit: true
    - bash: |
        set -xeou pipefail
        cranko release-workflow tag
        git push --tags origin release:release
      displayName: Tag and push
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: github_releases
    dependsOn: branch_and_tag # otherwise, GitHub creates the tags itself!
    pool:
      vmImage: ubuntu-20.04
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-job-setup.yml
      parameters:
        setupGit: true
    - bash: |
        set -xeou pipefail
        cranko github create-releases
      displayName: Create GitHub releases
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

  - job: npm_publish
    pool:
      vmImage: ubuntu-20.04
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-job-setup.yml
      parameters:
        setupBuild: true
        setupNpm: true
    - bash: npm run build
      displayName: NPM build
    - bash: |
        set -xeou pipefail
        cranko npm foreach-released npm publish
      displayName: Publish to NPM
    - bash: shred ~/.npmrc
      displayName: Clean up credentials



# - deploy engine-hosted
# - deploy embed
# - deploy embed-creator
# - deploy docs

  # Time for additional deployment steps, beyond any NPM publishing.
  #
  # Since the docs combine outputs from nearly every submodule, we deploy new
  # versions on every update of `release`. Because the docs combine many
  # different submodules, that raises the question of what version number to
  # assign. As a heuristic, we track @wwtelescope/engine. If a new non-prelease
  # version of the engine is published, we deploy the docs in a versioned
  # directory; otherwise we deploy under `latest`.

  ##- task: AzureFileCopy@3
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEngineVersion'], ''))
  ##  displayName: Deploy hosted engine artifacts
  ##  inputs:
  ##    SourcePath: '$(build.artifactStagingDirectory)/engine-hosted'
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    Destination: 'AzureBlob'
  ##    storage: 'wwtwebstatic'
  ##    ContainerName: '$web'
  ##    blobPrefix: engine/$(engineVersionText)

  ##- task: AzureFileCopy@3
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEmbedVersion'], ''))
  ##  displayName: Deploy embed web application
  ##  inputs:
  ##    SourcePath: '$(build.artifactStagingDirectory)/embed'
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    Destination: 'AzureBlob'
  ##    storage: 'wwtwebstatic'
  ##    ContainerName: '$web'
  ##    blobPrefix: embed/$(embedVersionText)/wwt

  ##- task: AzureFileCopy@3
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEmbedCreatorVersion'], ''))
  ##  displayName: Deploy embed-creator web application
  ##  inputs:
  ##    SourcePath: '$(build.artifactStagingDirectory)/embed-creator'
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    Destination: 'AzureBlob'
  ##    storage: 'wwtwebstatic'
  ##    ContainerName: '$web'
  ##    blobPrefix: _embedui

  ##- task: AzureFileCopy@3
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
  ##  displayName: Deploy documentation
  ##  inputs:
  ##    SourcePath: '$(build.artifactStagingDirectory)/docs'
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    Destination: 'AzureBlob'
  ##    storage: 'wwtwebstatic'
  ##    ContainerName: '$web'
  ##    blobPrefix: '_docs/webgl-reference/$(docsVersionText)'

  # CDN purges - last since they are slow and close to optional

  ##- task: AzurePowerShell@4
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEngineVersion'], ''))
  ##  displayName: CDN purge - hosted engine artifacts
  ##  inputs:
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    azurePowerShellVersion: 'LatestVersion'
  ##    scriptType: 'inlineScript'
  ##    inline: |
  ##      Unpublish-AzCdnEndpointContent `
  ##        -ProfileName wwt-cdn-01 `
  ##        -ResourceGroupName wwt-web01 `
  ##        -EndpointName wwtweb-prod `
  ##        -PurgeContent '/engine/$(engineVersionText)/*'

  ##- task: AzurePowerShell@4
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEmbedVersion'], ''))
  ##  displayName: CDN purge - embed web app
  ##  inputs:
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    azurePowerShellVersion: 'LatestVersion'
  ##    scriptType: 'inlineScript'
  ##    inline: |
  ##      Unpublish-AzCdnEndpointContent `
  ##        -ProfileName wwt-cdn-01 `
  ##        -ResourceGroupName wwt-web01 `
  ##        -EndpointName wwtweb-prod `
  ##        -PurgeContent '/embed/$(embedVersionText)/wwt/*'

  # People say the docs are misleading about how to purge a CDN endpoint from
  # the root; try the all-of-the-above approach.
  # https://stackoverflow.com/questions/50591959/how-to-full-purge-the-azure-cdn-through-powershell
  ##- task: AzurePowerShell@4
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEmbedCreatorVersion'], ''))
  ##  displayName: CDN purge - embed-creator web app
  ##  inputs:
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    azurePowerShellVersion: 'LatestVersion'
  ##    scriptType: 'inlineScript'
  ##    inline: |
  ##      $names = @('/', '/*', '/css/*', '/js/*')
  ##      Unpublish-AzCdnEndpointContent `
  ##        -ProfileName wwt-cdn-01 `
  ##        -ResourceGroupName wwt-web01 `
  ##        -EndpointName wwtwebembed-prod `
  ##        -PurgeContent $names

  ##- task: AzurePowerShell@4
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
  ##  displayName: CDN purge - docs
  ##  inputs:
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    azurePowerShellVersion: 'LatestVersion'
  ##    scriptType: 'inlineScript'
  ##    inline: |
  ##      Unpublish-AzCdnEndpointContent `
  ##        -ProfileName wwt-cdn-01 `
  ##        -ResourceGroupName wwt-web01 `
  ##        -EndpointName wwtwebdocs-prod `
  ##        -PurgeContent '/webgl-reference/$(docsVersionText)/*'
