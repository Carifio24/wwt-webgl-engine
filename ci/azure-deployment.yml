# Copyright 2020 the .NET Foundation
# Licensed under the MIT License

jobs:

- ${{ if eq(variables['Build.SourceBranchName'], 'rc') }}:
  - job: branch_and_tag
    pool:
      vmImage: ubuntu-20.04
    variables:
    - group: Deployment Credentials
    steps:
    - template: azure-deployment-setup.yml
      parameters:
        setupGit: true
    - bash: |
        set -xeou pipefail
        ./cranko release-workflow tag
        git push --tags origin release:release
      displayName: Tag and push
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

- job: Main
  pool:
    vmImage: windows-latest

  # variables:...

  steps:

  # Release processes.
  #
  # First, publishing NPM packages. I can only get the config step to work using bash.
  # No error message when running in cmd.

  - bash: |
      npm config set "//registry.npmjs.org/:_authToken=$NPM_TOKEN"
    displayName: Set up NPM auth
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
    failOnStderr: false
    env:
      NPM_TOKEN: $(NPM_TOKEN)

  - script: |
      npx lerna publish --yes --pre-dist-tag=beta from-package
    displayName: Publish new packages to NPM
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
    env:
      NPM_TOKEN: $(NPM_TOKEN)

  # Time for additional deployment steps, beyond any NPM publishing.
  #
  # Some of the packages have "postpublish" stages that will have been run by
  # lerna if a new version of the package was indeed published. These stages use
  # the ##vso syntax to set variables that we can then use to orchestrate other
  # aspects of the continuous deployment pipeline.
  #
  # Since the docs combine outputs from nearly every submodule, we deploy new
  # versions on every update of `release`. Because the docs combine many
  # different submodules, that raises the question of what version number to
  # assign. As a heuristic, we track @wwtelescope/engine. If a new non-prelease
  # version of the engine is published, we deploy the docs in a versioned
  # directory; otherwise we deploy under `latest`.

  - powershell: |
      $engineVers = "$(publishedEngineVersion)"
      Write-Host "##vso[task.setvariable variable=maybePublishedEngineVersion;]$engineVers"

      if ($engineVers.IndexOf("-beta") -ne -1) {
        Write-Host "##vso[task.setvariable variable=engineVersionText;]latest"
      } else {
        $major = ($engineVers -Split '\.')[0]
        Write-Host "##vso[task.setvariable variable=engineVersionText;]$major"
      }
    condition: and(succeeded(), ne(variables['publishedEngineVersion'], ''))
    displayName: Set @wwtelescope/engine deployment variables

  # An awkward hack for convenient setup of the docs deployment variables.
  - powershell: |
      Write-Host "##vso[task.setvariable variable=maybePublishedEngineVersion;]nochange-beta"
    condition: and(succeeded(), eq(variables['publishedEngineVersion'], ''))
    displayName: Default @wwtelescope/engine deployment variables

  - powershell: |
      $embedVers = "$(publishedEmbedVersion)"

      if ($embedVers.IndexOf("-beta") -ne -1) {
        Write-Host "##vso[task.setvariable variable=embedVersionText;]latest"
      } else {
        $major = ($embedVers -Split '\.')[0]
        Write-Host "##vso[task.setvariable variable=embedVersionText;]$major"
      }
    condition: and(succeeded(), ne(variables['publishedEmbedVersion'], ''))
    displayName: Set @wwtelescope/embed deployment variables

  - powershell: |
      $engineVers = "$(maybePublishedEngineVersion)"
      if ($engineVers.IndexOf("-beta") -ne -1) {
        Write-Host "##vso[task.setvariable variable=docsVersionText;]latest"
      } else {
        $majmin = ($engineVers -Split '\.')[0..1] -Join '.'
        Write-Host "##vso[task.setvariable variable=docsVersionText;]$majmin"
      }
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
    displayName: Set docs deployment variables

  ##- task: AzureFileCopy@3
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEngineVersion'], ''))
  ##  displayName: Deploy hosted engine artifacts
  ##  inputs:
  ##    SourcePath: '$(build.artifactStagingDirectory)/engine-hosted'
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    Destination: 'AzureBlob'
  ##    storage: 'wwtwebstatic'
  ##    ContainerName: '$web'
  ##    blobPrefix: engine/$(engineVersionText)

  ##- task: AzureFileCopy@3
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEmbedVersion'], ''))
  ##  displayName: Deploy embed web application
  ##  inputs:
  ##    SourcePath: '$(build.artifactStagingDirectory)/embed'
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    Destination: 'AzureBlob'
  ##    storage: 'wwtwebstatic'
  ##    ContainerName: '$web'
  ##    blobPrefix: embed/$(embedVersionText)/wwt

  ##- task: AzureFileCopy@3
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEmbedCreatorVersion'], ''))
  ##  displayName: Deploy embed-creator web application
  ##  inputs:
  ##    SourcePath: '$(build.artifactStagingDirectory)/embed-creator'
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    Destination: 'AzureBlob'
  ##    storage: 'wwtwebstatic'
  ##    ContainerName: '$web'
  ##    blobPrefix: _embedui

  ##- task: AzureFileCopy@3
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
  ##  displayName: Deploy documentation
  ##  inputs:
  ##    SourcePath: '$(build.artifactStagingDirectory)/docs'
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    Destination: 'AzureBlob'
  ##    storage: 'wwtwebstatic'
  ##    ContainerName: '$web'
  ##    blobPrefix: '_docs/webgl-reference/$(docsVersionText)'

  # CDN purges - last since they are slow and close to optional

  ##- task: AzurePowerShell@4
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEngineVersion'], ''))
  ##  displayName: CDN purge - hosted engine artifacts
  ##  inputs:
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    azurePowerShellVersion: 'LatestVersion'
  ##    scriptType: 'inlineScript'
  ##    inline: |
  ##      Unpublish-AzCdnEndpointContent `
  ##        -ProfileName wwt-cdn-01 `
  ##        -ResourceGroupName wwt-web01 `
  ##        -EndpointName wwtweb-prod `
  ##        -PurgeContent '/engine/$(engineVersionText)/*'

  ##- task: AzurePowerShell@4
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEmbedVersion'], ''))
  ##  displayName: CDN purge - embed web app
  ##  inputs:
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    azurePowerShellVersion: 'LatestVersion'
  ##    scriptType: 'inlineScript'
  ##    inline: |
  ##      Unpublish-AzCdnEndpointContent `
  ##        -ProfileName wwt-cdn-01 `
  ##        -ResourceGroupName wwt-web01 `
  ##        -EndpointName wwtweb-prod `
  ##        -PurgeContent '/embed/$(embedVersionText)/wwt/*'

  # People say the docs are misleading about how to purge a CDN endpoint from
  # the root; try the all-of-the-above approach.
  # https://stackoverflow.com/questions/50591959/how-to-full-purge-the-azure-cdn-through-powershell
  ##- task: AzurePowerShell@4
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['publishedEmbedCreatorVersion'], ''))
  ##  displayName: CDN purge - embed-creator web app
  ##  inputs:
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    azurePowerShellVersion: 'LatestVersion'
  ##    scriptType: 'inlineScript'
  ##    inline: |
  ##      $names = @('/', '/*', '/css/*', '/js/*')
  ##      Unpublish-AzCdnEndpointContent `
  ##        -ProfileName wwt-cdn-01 `
  ##        -ResourceGroupName wwt-web01 `
  ##        -EndpointName wwtwebembed-prod `
  ##        -PurgeContent $names

  ##- task: AzurePowerShell@4
  ##  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
  ##  displayName: CDN purge - docs
  ##  inputs:
  ##    azureSubscription: 'aas@wwtadmindotnetfoundation'
  ##    azurePowerShellVersion: 'LatestVersion'
  ##    scriptType: 'inlineScript'
  ##    inline: |
  ##      Unpublish-AzCdnEndpointContent `
  ##        -ProfileName wwt-cdn-01 `
  ##        -ResourceGroupName wwt-web01 `
  ##        -EndpointName wwtwebdocs-prod `
  ##        -PurgeContent '/webgl-reference/$(docsVersionText)/*'
